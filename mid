// Importar módulos
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

// Criar aplicativo Express
const app = express();

// Configurar o Body Parser para analisar solicitações HTTP
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Configurar conexão com o banco de dados MongoDB
mongoose.connect('mongodb://localhost/my_database');

// Definir esquema do modelo de usuário
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number
});

// Criar modelo de usuário
const User = mongoose.model('User', userSchema);

// Definir rotas da API RESTful para usuários
app.route('/users')
  .get((req, res) => {
    User.find((err, users) => {
      if (err) {
        res.send(err);
      } else {
        res.json(users);
      }
    });
  })
  .post((req, res) => {
    const user = new User(req.body);
    user.save((err) => {
      if (err) {
        res.send(err);
      } else {
        res.send('Usuário criado com sucesso!');
      }
    });
  });

app.route('/users/:userId')
  .get((req, res) => {
    User.findById(req.params.userId, (err, user) => {
      if (err) {
        res.send(err);
      } else {
        res.json(user);
      }
    });
  })
  .put((req, res) => {
    User.findByIdAndUpdate(req.params.userId, req.body, (err, user) => {
      if (err) {
        res.send(err);
      } else {
        res.send('Usuário atualizado com sucesso!');
      }
    });
  })
  .delete((req, res) => {
    User.findByIdAndRemove(req.params.userId, (err) => {
      if (err) {
        res.send(err);
      } else {
        res.send('Usuário excluído com sucesso!');
      }
    });
  });

// Iniciar servidor na porta 3000
app.listen(3000, () => {
  console.log('Servidor iniciado na porta 3000!');
});
